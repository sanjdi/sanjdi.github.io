{"componentChunkName":"component---src-pages-blog-contentful-post-url-js","path":"/blog/how-to-convert-less-than-table-greater-than-data-from-a-public-google-doc-to/","result":{"data":{"contentfulPost":{"title":"How to Convert <table> Data from a Public Google Doc to JSON Format","introduction":"In this blog post, I’ll walk through how to extract and convert table data from a public Google Doc into JSON format using Node.js.","content":{"raw":"{\"nodeType\":\"document\",\"data\":{},\"content\":[{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Intro\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"In this blog post, I’ll walk through how to extract and convert table data from a public Google Doc into JSON format using Node.js. I’ll leverage a tool that fetches the document’s HTML, parses the <table> tag, and formats the data into a JSON structure.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Understanding the Workflow\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The process involves the following steps:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"1. Fetch the Public Google Doc\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"    Retrieve the HTML content of the document.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"2. Parse the Table Data\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"    Extract the <table> structure using JSDOM.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"3. Convert to JSON\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"    Format the table rows and columns into a structured JSON object.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"4. Process the Data\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"    Transform the JSON output into the desired structure for use in your application.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"hr\",\"data\":{},\"content\":[]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Setting Up the Tool\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Here’s how the tool works:\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"1. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Fetching the Public Google Doc\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The tool uses Node.js https module to make a GET request to the public Google Doc URL. It ensures the content is HTML and retrieves the raw HTML string.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"  nodeFetch = async (url) => {\\n    return new Promise((resolve, reject) => {\\n      // Use https.get() to fetch the google doc\\n      const req = https\\n        .get(url, (res) => {\\n          const { statusCode } = res;\\n          const contentType = res.headers['content-type'];\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"          let error;\\n          // Any 2xx status code signals a successful response but\\n          // here we're only checking for 200.\\n          if (statusCode !== 200) {\\n            error = new Error(\\n              'Request Failed.\\\\n' + `Status Code: ${statusCode}`\\n            );\\n          } else if (!/^text\\\\/html/.test(contentType)) {\\n            error = new Error(\\n              'Invalid content-type.\\\\n' +\\n                `Expected text/html but received ${contentType}`\\n            );\\n          }\\n          if (error) {\\n            console.error(error.message);\\n            s;\\n            // Consume response data to free up memory\\n            res.resume();\\n            return;\\n          }\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"          res.setEncoding('utf8');\\n          let rawData = '';\\n          res.on('data', (chunk) => {\\n            rawData += chunk;\\n          });\\n          res.on('end', () => {\\n            resolve(rawData);\\n          });\\n        })\\n        .on('error', (e) => {\\n          console.error(`Got error: ${e.message}`);\\n        });\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"      req.on('error', reject);\\n      req.end();\\n    });\\n  };\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"2. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Parsing the HTML\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The JSDOM library is used to parse the raw HTML. The tool identifies the <table> element and extracts its headers and rows.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"  htmlTableToJSON(inputString) {\\n    // Parse the HTML string into a DOM object\\n    const dom = new JSDOM(inputString);\\n    const document = dom.window.document;\\n\\n    // Find the table and tbody elements\\n    const table = document.querySelector('table');\\n    const tbody = table ? table.querySelector('tbody') : null;\\n\\n    // Initialize the output JSON structure\\n    const jsonOutput = {\\n      status: 'ok',\\n      table: {\\n        cols: [],\\n        rows: [],\\n        parsedNumHeaders: 0,\\n      },\\n    };\\n\\n    if (tbody) {\\n      // Extract headers from the first row\\n      const headers = Array.from(\\n        tbody.querySelectorAll('tr:first-child td')\\n      ).map((td) => td.textContent.trim());\\n\\n      // Add header columns to JSON output\\n      if (headers.length) {\\n        jsonOutput.table.cols = headers.map((header, index) => ({\\n          id: String.fromCharCode(65 + index),\\n          label: header,\\n          type: index === 0 || index === 2 ? 'number' : 'string',\\n          pattern: index === 0 || index === 2 ? 'General' : undefined,\\n        }));\\n        jsonOutput.table.parsedNumHeaders = 0;\\n      }\\n\\n      // Extract data rows\\n      const rows = tbody.querySelectorAll('tr:not(:first-child)');\\n      jsonOutput.table.rows = Array.from(rows).map((row) => {\\n        const cells = Array.from(row.querySelectorAll('td')).map((td) => {\\n          const text = td.textContent.trim();\\n          const value = parseFloat(text);\\n          return {\\n            v: isNaN(value) ? text : value,\\n            f: isNaN(value) ? undefined : text,\\n          };\\n        });\\n        return { c: cells };\\n      });\\n    }\\n\\n    return jsonOutput;\\n  }\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"3. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Formatting as JSON\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"The extracted table data is formatted into a JSON structure with columns (cols) and rows.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"  normalizeRow(rows) {\\n    return rows.map((row) =>\\n      row && row.v !== null && row.v !== undefined ? row : {}\\n    );\\n  }\\n\\n  applyHeaderIntoRows(header, rows) {\\n    return rows\\n      .map(({ c: row }) => this.normalizeRow(row))\\n      .map((row) =>\\n        row.reduce(\\n          (p, c, i) =>\\n            c.v !== null && c.v !== undefined\\n              ? Object.assign(p, {\\n                  [header[i]]: this.useFormat\\n                    ? c.f || c.v\\n                    : this.useFormattedDate && this.isDate(c.v)\\n                    ? c.f || c.v\\n                    : c.v,\\n                })\\n              : p,\\n          {}\\n        )\\n      );\\n  }\\n\\n  getItems(parsedJSON) {\\n    let rows = [];\\n\\n    try {\\n\\n      const hasSomeLabelPropertyInCols = parsedJSON.table.cols.some(\\n        ({ label }) => !!label\\n      );\\n      if (hasSomeLabelPropertyInCols) {\\n        const header = parsedJSON.table.cols.map(({ label }) => label);\\n\\n        rows = this.applyHeaderIntoRows(header, parsedJSON.table.rows);\\n      } else {\\n        const [headerRow, ...originalRows] = parsedJSON.table.rows;\\n        const header = this.normalizeRow(headerRow.c).map((row) => row.v);\\n\\n        rows = this.applyHeaderIntoRows(header, originalRows);\\n      }\\n    } catch (e) {\\n      console.error('Error parsing google doc data:', e);\\n    }\\n\\n    return rows;\\n  }\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"heading-4\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"4. \",\"marks\":[],\"data\":{}},{\"nodeType\":\"text\",\"value\":\"Decoding the Data\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"Once the JSON is ready, you can process it to reveal the desired outcome.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"  async getGoogleDocTableDataUsingNodeFetch(url) {\\n    if (!url) return null;\\n\\n    try {\\n      // Fetch google doc as a html string\\n      const rawData = await this.nodeFetch(url);\\n\\n      if (rawData) {\\n        try {\\n          // Extract the first <table>..</table>\\n          const [tableRawData, _] = rawData.match(/(<table)[\\\\s\\\\S]+(\\\\/table>)/);\\n\\n          // Parse table data to a json object with required format\\n          const parsedJSON = this.htmlTableToJSON(tableRawData);\\n\\n          return parsedJSON ? parsedJSON : null;\\n        } catch (e) {\\n          console.error(e.message);\\n        }\\n      }\\n      return null;\\n    } catch (e) {\\n      console.error('Error fetching spreadsheet data:', e);\\n      return null;\\n    }\\n  }\\n\\n  async parse(url) {\\n    if (!url) throw new Error('Url is required.');\\n\\n    // Extract data from the first <table>..</table> of the google doc\\n    const googleDocResponse = await this.getGoogleDocTableDataUsingNodeFetch(\\n      url\\n    );\\n\\n    if (googleDocResponse === null) return [];\\n\\n    // Format table data to required structure for display\\n    return this.getItems(googleDocResponse);\\n  }\",\"marks\":[{\"type\":\"code\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"View the full code at \",\"marks\":[],\"data\":{}},{\"nodeType\":\"hyperlink\",\"data\":{\"uri\":\"https://github.com/sanjdi/GoogleDocTableParser/blob/main/app.js\"},\"content\":[{\"nodeType\":\"text\",\"value\":\"GoogleDocTableParser/app.js\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"hr\",\"data\":{},\"content\":[]},{\"nodeType\":\"heading-3\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"How to Use\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"1. Share the Google Doc\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"    Make sure the document is publicly accessible and copy the shareable link.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"2. Run the Tool\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"    Execute the tool in your terminal, passing the URL of the public Google Doc.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"3. View the Output\",\"marks\":[{\"type\":\"bold\"}],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"    The extracted table data will be displayed in JSON format.\",\"marks\":[],\"data\":{}}]},{\"nodeType\":\"paragraph\",\"data\":{},\"content\":[{\"nodeType\":\"text\",\"value\":\"\",\"marks\":[],\"data\":{}}]}]}"},"createdAt":"28 November, 2024"}},"pageContext":{"id":"67adecb6-1be7-5921-a31c-278a534e52b8","url":"how-to-convert-less-than-table-greater-than-data-from-a-public-google-doc-to","__params":{"url":"how-to-convert-less-than-table-greater-than-data-from-a-public-google-doc-to"}}},"staticQueryHashes":["1852691584","2154695605","2659547818","2870553852","3949767119","4035163262"],"slicesMap":{}}